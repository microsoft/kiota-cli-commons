# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
      - main
      - refs/tags/v*

pr: none


variables:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  ProductBinPath: '$(Build.SourcesDirectory)\src\Microsoft.Kiota.Cli.Commons\bin\$(BuildConfiguration)'
  ProjectFile: '$(Build.SourcesDirectory)/src/Microsoft.Kiota.Cli.Commons/Microsoft.Kiota.Cli.Commons.csproj'
  PublicKey: 0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: Azure-Pipelines-1ESPT-ExDShared
      vmImage: windows-latest
    stages:

    - stage: build
      jobs:
        - job: build
          steps:
          - checkout: self
            submodules: true

          - task: UseDotNet@2
            displayName: 'Use .NET 8'
            inputs:
              version: 8.x

          # Install the nuget tool.
          - task: NuGetToolInstaller@1
            displayName: 'Install Nuget dependency manager'
            inputs:
              versionSpec: '>=5.2.0'
              checkLatest: true

          # Build the Product project
          - task: DotNetCoreCLI@2
            displayName: 'Build Microsoft.Kiota.Cli.Commons'
            inputs:
              projects: '$(Build.SourcesDirectory)\Microsoft.Kiota.Cli.Commons.sln'
              arguments: '--configuration $(BuildConfiguration) --no-incremental -p:DelaySign=true -p:SignAssembly=true -p:PublicKey=$(PublicKey)'

          # Run the Unit test
          - task: DotNetCoreCLI@2
            displayName: 'Test Microsoft.Kiota.Cli.Commons'
            inputs:
              command: test
              projects: '$(Build.SourcesDirectory)\Microsoft.Kiota.Cli.Commons.sln'
              arguments: '--configuration $(BuildConfiguration) --no-build'

          - task: UseDotNet@2
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
            displayName: 'Add .NET 2'
            inputs:
              version: 2.x

          - task: EsrpCodeSigning@5
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
            displayName: 'ESRP DLL Strong Name'
            inputs:
              ConnectedServiceName: 'Federated DevX ESRP Managed Identity Connection'
              AppRegistrationClientId: '65035b7f-7357-4f29-bf25-c5ee5c3949f8'
              AppRegistrationTenantId: 'cdc5aeea-15c5-4db6-b079-fcadd2505dc2'
              AuthAKVName: 'akv-prod-eastus'
              AuthCertName: 'ReferenceLibraryPrivateCert'
              AuthSignCertName: 'ReferencePackagePublisherCertificate'
              FolderPath: $(ProductBinPath)
              Pattern: Microsoft.Kiota.Cli.Commons.dll
              signConfigType: inlineSignParams
              inlineOperation: |
                [
                    {
                        "keyCode": "CP-233863-SN",
                        "operationSetCode": "StrongNameSign",
                        "parameters": [],
                        "toolName": "sign",
                        "toolVersion": "1.0"
                    },
                    {
                        "keyCode": "CP-233863-SN",
                        "operationSetCode": "StrongNameVerify",
                        "parameters": [],
                        "toolName": "sign",
                        "toolVersion": "1.0"
                    }
                ]
              SessionTimeout: 20

          - task: EsrpCodeSigning@5
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
            displayName: 'ESRP DLL CodeSigning'
            inputs:
              ConnectedServiceName: 'Federated DevX ESRP Managed Identity Connection'
              AppRegistrationClientId: '65035b7f-7357-4f29-bf25-c5ee5c3949f8'
              AppRegistrationTenantId: 'cdc5aeea-15c5-4db6-b079-fcadd2505dc2'
              AuthAKVName: 'akv-prod-eastus'
              AuthCertName: 'ReferenceLibraryPrivateCert'
              AuthSignCertName: 'ReferencePackagePublisherCertificate'
              FolderPath: src
              signConfigType: inlineSignParams
              inlineOperation: |
                [
                    {
                        "keyCode": "CP-230012",
                        "operationSetCode": "SigntoolSign",
                        "parameters": [
                        {
                            "parameterName": "OpusName",
                            "parameterValue": "Microsoft"
                        },
                        {
                            "parameterName": "OpusInfo",
                            "parameterValue": "http://www.microsoft.com"
                        },
                        {
                            "parameterName": "FileDigest",
                            "parameterValue": "/fd \"SHA256\""
                        },
                        {
                            "parameterName": "PageHash",
                            "parameterValue": "/NPH"
                        },
                        {
                            "parameterName": "TimeStamp",
                            "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                        }
                        ],
                        "toolName": "sign",
                        "toolVersion": "1.0"
                    },
                    {
                        "keyCode": "CP-230012",
                        "operationSetCode": "SigntoolVerify",
                        "parameters": [ ],
                        "toolName": "sign",
                        "toolVersion": "1.0"
                    }
                ]
              SessionTimeout: 20

          # arguments are not parsed in DotNetCoreCLI@2 task for `pack` command, that's why we have a custom pack command here
          - pwsh: dotnet pack "$(ProjectFile)" /p:IncludeSymbols=true /p:SymbolPackageFormat=snupkg --no-build --output $env:BUILD_ARTIFACTSTAGINGDIRECTORY/Nugets --configuration $env:BUILD_CONFIGURATION
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
            env:
              BUILD_CONFIGURATION: $(BuildConfiguration)
            displayName: Dotnet pack

          - task: PowerShell@2
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
            displayName: 'Validate project version has been incremented'
            inputs:
              targetType: 'filePath'
              filePath: $(System.DefaultWorkingDirectory)\scripts\ValidateProjectVersionUpdated.ps1
              arguments: '-projectPath "$(ProjectFile)" -packageName "Microsoft.Kiota.Cli.Commons"'
              pwsh: true

          - task: EsrpCodeSigning@5
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
            displayName: 'ESRP CodeSigning Nuget Packages'
            inputs:
              ConnectedServiceName: 'Federated DevX ESRP Managed Identity Connection'
              AppRegistrationClientId: '65035b7f-7357-4f29-bf25-c5ee5c3949f8'
              AppRegistrationTenantId: 'cdc5aeea-15c5-4db6-b079-fcadd2505dc2'
              AuthAKVName: 'akv-prod-eastus'
              AuthCertName: 'ReferenceLibraryPrivateCert'
              AuthSignCertName: 'ReferencePackagePublisherCertificate'
              FolderPath: '$(Build.ArtifactStagingDirectory)/Nugets'
              Pattern: '*.nupkg'
              signConfigType: inlineSignParams
              inlineOperation: |
                [
                    {
                        "keyCode": "CP-401405",
                        "operationSetCode": "NuGetSign",
                        "parameters": [ ],
                        "toolName": "sign",
                        "toolVersion": "1.0"
                    },
                    {
                        "keyCode": "CP-401405",
                        "operationSetCode": "NuGetVerify",
                        "parameters": [ ],
                        "toolName": "sign",
                        "toolVersion": "1.0"
                    }
                ]
              SessionTimeout: 20
              
          - task: CopyFiles@2
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
            displayName: 'Copy release scripts to artifact staging directory'
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)'
              Contents: 'scripts\**'
              TargetFolder: '$(Build.ArtifactStagingDirectory)/Nugets'

          - task: 1ES.PublishPipelineArtifact@1
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
            displayName: 'Upload Artifact: Nugets'
            inputs:
              artifactName: Nugets
              targetPath: $(Build.ArtifactStagingDirectory)/Nugets

    - stage: deploy
      condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
      dependsOn: build
      jobs:
        - deployment: deploy_cli_commons
          environment: nuget-org
          strategy:
            runOnce:
              deploy:
                pool:
                  vmImage: ubuntu-latest
                steps:
                - task: DownloadPipelineArtifact@2
                  displayName: Download nupkg from artifacts
                  inputs:
                    artifact: Nugets
                    source: current
                - task: PowerShell@2
                  displayName: 'Extract release information to pipeline'
                  inputs:
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)\scripts\GetNugetPackageVersion.ps1
                    pwsh: true
                    arguments: '-packageDirPath "$(Pipeline.Workspace)/Nugets/"'
                - task: 1ES.PublishNuget@1
                  displayName: 'NuGet push'
                  inputs:
                    packagesToPush: '$(Pipeline.Workspace)/Microsoft.Kiota.Cli.Commons.*.nupkg'
                    nuGetFeedType: external
                    publishFeedCredentials: 'Kiota Nuget Connection'
                    packageParentPath: '$(Pipeline.Workspace)'
